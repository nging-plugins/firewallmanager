// @generated Do not edit this file, which is automatically generated by the generator.

package dbschema

import (
	"fmt"

	"time"

	"github.com/webx-top/com"
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/db/lib/factory/pagination"
	"github.com/webx-top/echo"
	"github.com/webx-top/echo/param"
)

type Slice_NgingFirewallRuleStatic []*NgingFirewallRuleStatic

func (s Slice_NgingFirewallRuleStatic) Range(fn func(m factory.Model) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_NgingFirewallRuleStatic) RangeRaw(fn func(m *NgingFirewallRuleStatic) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_NgingFirewallRuleStatic) GroupBy(keyField string) map[string][]*NgingFirewallRuleStatic {
	r := map[string][]*NgingFirewallRuleStatic{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*NgingFirewallRuleStatic{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (s Slice_NgingFirewallRuleStatic) KeyBy(keyField string) map[string]*NgingFirewallRuleStatic {
	r := map[string]*NgingFirewallRuleStatic{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (s Slice_NgingFirewallRuleStatic) AsKV(keyField string, valueField string) param.Store {
	r := param.Store{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (s Slice_NgingFirewallRuleStatic) Transform(transfers map[string]param.Transfer) []param.Store {
	r := make([]param.Store, len(s))
	for idx, row := range s {
		r[idx] = row.AsMap().Transform(transfers)
	}
	return r
}

func (s Slice_NgingFirewallRuleStatic) FromList(data interface{}) Slice_NgingFirewallRuleStatic {
	values, ok := data.([]*NgingFirewallRuleStatic)
	if !ok {
		for _, value := range data.([]interface{}) {
			row := &NgingFirewallRuleStatic{}
			row.FromRow(value.(map[string]interface{}))
			s = append(s, row)
		}
		return s
	}
	s = append(s, values...)

	return s
}

func NewNgingFirewallRuleStatic(ctx echo.Context) *NgingFirewallRuleStatic {
	m := &NgingFirewallRuleStatic{}
	m.SetContext(ctx)
	return m
}

// NgingFirewallRuleStatic 防火墙静态规则
type NgingFirewallRuleStatic struct {
	base    factory.Base
	objects []*NgingFirewallRuleStatic

	Id         uint   `db:"id,omitempty,pk" bson:"id,omitempty" comment:"ID" json:"id" xml:"id"`
	Type       string `db:"type" bson:"type" comment:"类型(filter/nat/mangle/raw)" json:"type" xml:"type"`
	Position   int    `db:"position" bson:"position" comment:"位置" json:"position" xml:"position"`
	Name       string `db:"name" bson:"name" comment:"规则名称" json:"name" xml:"name"`
	Direction  string `db:"direction" bson:"direction" comment:"方向" json:"direction" xml:"direction"`
	Protocol   string `db:"protocol" bson:"protocol" comment:"协议" json:"protocol" xml:"protocol"`
	RemoteIp   string `db:"remote_ip" bson:"remote_ip" comment:"远程IP" json:"remote_ip" xml:"remote_ip"`
	RemotePort string `db:"remote_port" bson:"remote_port" comment:"远程端口" json:"remote_port" xml:"remote_port"`
	LocalIp    string `db:"local_ip" bson:"local_ip" comment:"本地IP" json:"local_ip" xml:"local_ip"`
	LocalPort  string `db:"local_port" bson:"local_port" comment:"本地端口" json:"local_port" xml:"local_port"`
	NatIp      string `db:"nat_ip" bson:"nat_ip" comment:"NAT IP" json:"nat_ip" xml:"nat_ip"`
	NatPort    string `db:"nat_port" bson:"nat_port" comment:"NAT 端口" json:"nat_port" xml:"nat_port"`
	Interface  string `db:"interface" bson:"interface" comment:"入站网口" json:"interface" xml:"interface"`
	Outerface  string `db:"outerface" bson:"outerface" comment:"出站往口" json:"outerface" xml:"outerface"`
	State      string `db:"state" bson:"state" comment:"状态(多个用逗号\",\"分隔)" json:"state" xml:"state"`
	Action     string `db:"action" bson:"action" comment:"操作" json:"action" xml:"action"`
	IpVersion  string `db:"ip_version" bson:"ip_version" comment:"IP版本" json:"ip_version" xml:"ip_version"`
	Disabled   string `db:"disabled" bson:"disabled" comment:"是否(Y/N)禁用" json:"disabled" xml:"disabled"`
	Created    uint   `db:"created" bson:"created" comment:"创建时间" json:"created" xml:"created"`
	Updated    uint   `db:"updated" bson:"updated" comment:"更新时间" json:"updated" xml:"updated"`
}

// - base function

func (a *NgingFirewallRuleStatic) Trans() factory.Transactioner {
	return a.base.Trans()
}

func (a *NgingFirewallRuleStatic) Use(trans factory.Transactioner) factory.Model {
	a.base.Use(trans)
	return a
}

func (a *NgingFirewallRuleStatic) SetContext(ctx echo.Context) factory.Model {
	a.base.SetContext(ctx)
	return a
}

func (a *NgingFirewallRuleStatic) EventON(on ...bool) factory.Model {
	a.base.EventON(on...)
	return a
}

func (a *NgingFirewallRuleStatic) EventOFF(off ...bool) factory.Model {
	a.base.EventOFF(off...)
	return a
}

func (a *NgingFirewallRuleStatic) Context() echo.Context {
	return a.base.Context()
}

func (a *NgingFirewallRuleStatic) SetConnID(connID int) factory.Model {
	a.base.SetConnID(connID)
	return a
}

func (a *NgingFirewallRuleStatic) ConnID() int {
	return a.base.ConnID()
}

func (a *NgingFirewallRuleStatic) SetNamer(namer func(factory.Model) string) factory.Model {
	a.base.SetNamer(namer)
	return a
}

func (a *NgingFirewallRuleStatic) Namer() func(factory.Model) string {
	return a.base.Namer()
}

func (a *NgingFirewallRuleStatic) SetParam(param *factory.Param) factory.Model {
	a.base.SetParam(param)
	return a
}

func (a *NgingFirewallRuleStatic) Param(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	if a.base.Param() == nil {
		return a.NewParam().SetMiddleware(mw).SetArgs(args...)
	}
	return a.base.Param().SetMiddleware(mw).SetArgs(args...)
}

// - current function

func (a *NgingFirewallRuleStatic) New(structName string, connID ...int) factory.Model {
	if len(connID) > 0 {
		return factory.NewModel(structName, connID[0]).Use(a.base.Trans())
	}
	return factory.NewModel(structName, a.base.ConnID()).Use(a.base.Trans())
}

func (a *NgingFirewallRuleStatic) Objects() []*NgingFirewallRuleStatic {
	if a.objects == nil {
		return nil
	}
	return a.objects[:]
}

func (a *NgingFirewallRuleStatic) XObjects() Slice_NgingFirewallRuleStatic {
	return Slice_NgingFirewallRuleStatic(a.Objects())
}

func (a *NgingFirewallRuleStatic) NewObjects() factory.Ranger {
	return &Slice_NgingFirewallRuleStatic{}
}

func (a *NgingFirewallRuleStatic) InitObjects() *[]*NgingFirewallRuleStatic {
	a.objects = []*NgingFirewallRuleStatic{}
	return &a.objects
}

func (a *NgingFirewallRuleStatic) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(a.base.ConnID()).SetTrans(a.base.Trans()).SetCollection(a.Name_()).SetModel(a)
}

func (a *NgingFirewallRuleStatic) Short_() string {
	return "nging_firewall_rule_static"
}

func (a *NgingFirewallRuleStatic) Struct_() string {
	return "NgingFirewallRuleStatic"
}

func (a *NgingFirewallRuleStatic) Name_() string {
	if a.base.Namer() != nil {
		return WithPrefix(a.base.Namer()(a))
	}
	return WithPrefix(factory.TableNamerGet(a.Short_())(a))
}

func (a *NgingFirewallRuleStatic) CPAFrom(source factory.Model) factory.Model {
	a.SetContext(source.Context())
	a.SetConnID(source.ConnID())
	a.SetNamer(source.Namer())
	return a
}

func (a *NgingFirewallRuleStatic) Get(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	base := a.base
	if !a.base.Eventable() {
		err = a.Param(mw, args...).SetRecv(a).One()
		a.base = base
		return
	}
	queryParam := a.Param(mw, args...).SetRecv(a)
	if err = DBI.FireReading(a, queryParam); err != nil {
		return
	}
	err = queryParam.One()
	a.base = base
	if err == nil {
		err = DBI.FireReaded(a, queryParam)
	}
	return
}

func (a *NgingFirewallRuleStatic) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*NgingFirewallRuleStatic:
			err = DBI.FireReaded(a, queryParam, Slice_NgingFirewallRuleStatic(*v))
		case []*NgingFirewallRuleStatic:
			err = DBI.FireReaded(a, queryParam, Slice_NgingFirewallRuleStatic(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *NgingFirewallRuleStatic) GroupBy(keyField string, inputRows ...[]*NgingFirewallRuleStatic) map[string][]*NgingFirewallRuleStatic {
	var rows Slice_NgingFirewallRuleStatic
	if len(inputRows) > 0 {
		rows = Slice_NgingFirewallRuleStatic(inputRows[0])
	} else {
		rows = Slice_NgingFirewallRuleStatic(a.Objects())
	}
	return rows.GroupBy(keyField)
}

func (a *NgingFirewallRuleStatic) KeyBy(keyField string, inputRows ...[]*NgingFirewallRuleStatic) map[string]*NgingFirewallRuleStatic {
	var rows Slice_NgingFirewallRuleStatic
	if len(inputRows) > 0 {
		rows = Slice_NgingFirewallRuleStatic(inputRows[0])
	} else {
		rows = Slice_NgingFirewallRuleStatic(a.Objects())
	}
	return rows.KeyBy(keyField)
}

func (a *NgingFirewallRuleStatic) AsKV(keyField string, valueField string, inputRows ...[]*NgingFirewallRuleStatic) param.Store {
	var rows Slice_NgingFirewallRuleStatic
	if len(inputRows) > 0 {
		rows = Slice_NgingFirewallRuleStatic(inputRows[0])
	} else {
		rows = Slice_NgingFirewallRuleStatic(a.Objects())
	}
	return rows.AsKV(keyField, valueField)
}

func (a *NgingFirewallRuleStatic) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*NgingFirewallRuleStatic:
			err = DBI.FireReaded(a, queryParam, Slice_NgingFirewallRuleStatic(*v))
		case []*NgingFirewallRuleStatic:
			err = DBI.FireReaded(a, queryParam, Slice_NgingFirewallRuleStatic(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *NgingFirewallRuleStatic) Insert() (pk interface{}, err error) {
	a.Created = uint(time.Now().Unix())
	a.Id = 0
	if len(a.Type) == 0 {
		a.Type = "filter"
	}
	if len(a.Direction) == 0 {
		a.Direction = "INPUT"
	}
	if len(a.Protocol) == 0 {
		a.Protocol = "all"
	}
	if len(a.Action) == 0 {
		a.Action = "ACCEPT"
	}
	if len(a.IpVersion) == 0 {
		a.IpVersion = "4"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if a.base.Eventable() {
		err = DBI.Fire("creating", a, nil)
		if err != nil {
			return
		}
	}
	pk, err = a.Param(nil).SetSend(a).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint(v)
		}
	}
	if err == nil && a.base.Eventable() {
		err = DBI.Fire("created", a, nil)
	}
	return
}

func (a *NgingFirewallRuleStatic) Update(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.Type) == 0 {
		a.Type = "filter"
	}
	if len(a.Direction) == 0 {
		a.Direction = "INPUT"
	}
	if len(a.Protocol) == 0 {
		a.Protocol = "all"
	}
	if len(a.Action) == 0 {
		a.Action = "ACCEPT"
	}
	if len(a.IpVersion) == 0 {
		a.IpVersion = "4"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Update()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(a).Update(); err != nil {
		return
	}
	return DBI.Fire("updated", a, mw, args...)
}

func (a *NgingFirewallRuleStatic) Updatex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.Type) == 0 {
		a.Type = "filter"
	}
	if len(a.Direction) == 0 {
		a.Direction = "INPUT"
	}
	if len(a.Protocol) == 0 {
		a.Protocol = "all"
	}
	if len(a.Action) == 0 {
		a.Action = "ACCEPT"
	}
	if len(a.IpVersion) == 0 {
		a.IpVersion = "4"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Updatex()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).SetSend(a).Updatex(); err != nil {
		return
	}
	err = DBI.Fire("updated", a, mw, args...)
	return
}

func (a *NgingFirewallRuleStatic) UpdateByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.Type) == 0 {
		a.Type = "filter"
	}
	if len(a.Direction) == 0 {
		a.Direction = "INPUT"
	}
	if len(a.Protocol) == 0 {
		a.Protocol = "all"
	}
	if len(a.Action) == 0 {
		a.Action = "ACCEPT"
	}
	if len(a.IpVersion) == 0 {
		a.IpVersion = "4"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdateByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).UpdateByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *NgingFirewallRuleStatic) UpdatexByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (affected int64, err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.Type) == 0 {
		a.Type = "filter"
	}
	if len(a.Direction) == 0 {
		a.Direction = "INPUT"
	}
	if len(a.Protocol) == 0 {
		a.Protocol = "all"
	}
	if len(a.Action) == 0 {
		a.Action = "ACCEPT"
	}
	if len(a.IpVersion) == 0 {
		a.IpVersion = "4"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdatexByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).UpdatexByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *NgingFirewallRuleStatic) UpdateField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (err error) {
	return a.UpdateFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *NgingFirewallRuleStatic) UpdatexField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (affected int64, err error) {
	return a.UpdatexFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *NgingFirewallRuleStatic) UpdateFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (err error) {

	if val, ok := kvset["type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["type"] = "filter"
		}
	}
	if val, ok := kvset["direction"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["direction"] = "INPUT"
		}
	}
	if val, ok := kvset["protocol"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["protocol"] = "all"
		}
	}
	if val, ok := kvset["action"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["action"] = "ACCEPT"
		}
	}
	if val, ok := kvset["ip_version"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["ip_version"] = "4"
		}
	}
	if val, ok := kvset["disabled"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["disabled"] = "N"
		}
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Update()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(kvset).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, editColumns, mw, args...)
}

func (a *NgingFirewallRuleStatic) UpdatexFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (affected int64, err error) {

	if val, ok := kvset["type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["type"] = "filter"
		}
	}
	if val, ok := kvset["direction"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["direction"] = "INPUT"
		}
	}
	if val, ok := kvset["protocol"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["protocol"] = "all"
		}
	}
	if val, ok := kvset["action"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["action"] = "ACCEPT"
		}
	}
	if val, ok := kvset["ip_version"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["ip_version"] = "4"
		}
	}
	if val, ok := kvset["disabled"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["disabled"] = "N"
		}
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Updatex()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).SetSend(kvset).Updatex(); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", &m, editColumns, mw, args...)
	return
}

func (a *NgingFirewallRuleStatic) UpdateValues(mw func(db.Result) db.Result, keysValues *db.KeysValues, args ...interface{}) (err error) {
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(keysValues).Update()
	}
	m := *a
	m.FromRow(keysValues.Map())
	if err = DBI.FireUpdate("updating", &m, keysValues.Keys(), mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(keysValues).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, keysValues.Keys(), mw, args...)
}

func (a *NgingFirewallRuleStatic) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = a.Param(mw, args...).SetSend(a).Upsert(func() error {
		a.Updated = uint(time.Now().Unix())
		if len(a.Type) == 0 {
			a.Type = "filter"
		}
		if len(a.Direction) == 0 {
			a.Direction = "INPUT"
		}
		if len(a.Protocol) == 0 {
			a.Protocol = "all"
		}
		if len(a.Action) == 0 {
			a.Action = "ACCEPT"
		}
		if len(a.IpVersion) == 0 {
			a.IpVersion = "4"
		}
		if len(a.Disabled) == 0 {
			a.Disabled = "N"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("updating", a, mw, args...)
	}, func() error {
		a.Created = uint(time.Now().Unix())
		a.Id = 0
		if len(a.Type) == 0 {
			a.Type = "filter"
		}
		if len(a.Direction) == 0 {
			a.Direction = "INPUT"
		}
		if len(a.Protocol) == 0 {
			a.Protocol = "all"
		}
		if len(a.Action) == 0 {
			a.Action = "ACCEPT"
		}
		if len(a.IpVersion) == 0 {
			a.IpVersion = "4"
		}
		if len(a.Disabled) == 0 {
			a.Disabled = "N"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("creating", a, nil)
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint(v)
		}
	}
	if err == nil && a.base.Eventable() {
		if pk == nil {
			err = DBI.Fire("updated", a, mw, args...)
		} else {
			err = DBI.Fire("created", a, nil)
		}
	}
	return
}

func (a *NgingFirewallRuleStatic) Delete(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Delete()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).Delete(); err != nil {
		return
	}
	return DBI.Fire("deleted", a, mw, args...)
}

func (a *NgingFirewallRuleStatic) Deletex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Deletex()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).Deletex(); err != nil {
		return
	}
	err = DBI.Fire("deleted", a, mw, args...)
	return
}

func (a *NgingFirewallRuleStatic) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return a.Param(mw, args...).Count()
}

func (a *NgingFirewallRuleStatic) Exists(mw func(db.Result) db.Result, args ...interface{}) (bool, error) {
	return a.Param(mw, args...).Exists()
}

func (a *NgingFirewallRuleStatic) Reset() *NgingFirewallRuleStatic {
	a.Id = 0
	a.Type = ``
	a.Position = 0
	a.Name = ``
	a.Direction = ``
	a.Protocol = ``
	a.RemoteIp = ``
	a.RemotePort = ``
	a.LocalIp = ``
	a.LocalPort = ``
	a.NatIp = ``
	a.NatPort = ``
	a.Interface = ``
	a.Outerface = ``
	a.State = ``
	a.Action = ``
	a.IpVersion = ``
	a.Disabled = ``
	a.Created = 0
	a.Updated = 0
	return a
}

func (a *NgingFirewallRuleStatic) AsMap(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		r["Id"] = a.Id
		r["Type"] = a.Type
		r["Position"] = a.Position
		r["Name"] = a.Name
		r["Direction"] = a.Direction
		r["Protocol"] = a.Protocol
		r["RemoteIp"] = a.RemoteIp
		r["RemotePort"] = a.RemotePort
		r["LocalIp"] = a.LocalIp
		r["LocalPort"] = a.LocalPort
		r["NatIp"] = a.NatIp
		r["NatPort"] = a.NatPort
		r["Interface"] = a.Interface
		r["Outerface"] = a.Outerface
		r["State"] = a.State
		r["Action"] = a.Action
		r["IpVersion"] = a.IpVersion
		r["Disabled"] = a.Disabled
		r["Created"] = a.Created
		r["Updated"] = a.Updated
		return r
	}
	for _, field := range onlyFields {
		switch field {
		case "Id":
			r["Id"] = a.Id
		case "Type":
			r["Type"] = a.Type
		case "Position":
			r["Position"] = a.Position
		case "Name":
			r["Name"] = a.Name
		case "Direction":
			r["Direction"] = a.Direction
		case "Protocol":
			r["Protocol"] = a.Protocol
		case "RemoteIp":
			r["RemoteIp"] = a.RemoteIp
		case "RemotePort":
			r["RemotePort"] = a.RemotePort
		case "LocalIp":
			r["LocalIp"] = a.LocalIp
		case "LocalPort":
			r["LocalPort"] = a.LocalPort
		case "NatIp":
			r["NatIp"] = a.NatIp
		case "NatPort":
			r["NatPort"] = a.NatPort
		case "Interface":
			r["Interface"] = a.Interface
		case "Outerface":
			r["Outerface"] = a.Outerface
		case "State":
			r["State"] = a.State
		case "Action":
			r["Action"] = a.Action
		case "IpVersion":
			r["IpVersion"] = a.IpVersion
		case "Disabled":
			r["Disabled"] = a.Disabled
		case "Created":
			r["Created"] = a.Created
		case "Updated":
			r["Updated"] = a.Updated
		}
	}
	return r
}

func (a *NgingFirewallRuleStatic) FromRow(row map[string]interface{}) {
	for key, value := range row {
		switch key {
		case "id":
			a.Id = param.AsUint(value)
		case "type":
			a.Type = param.AsString(value)
		case "position":
			a.Position = param.AsInt(value)
		case "name":
			a.Name = param.AsString(value)
		case "direction":
			a.Direction = param.AsString(value)
		case "protocol":
			a.Protocol = param.AsString(value)
		case "remote_ip":
			a.RemoteIp = param.AsString(value)
		case "remote_port":
			a.RemotePort = param.AsString(value)
		case "local_ip":
			a.LocalIp = param.AsString(value)
		case "local_port":
			a.LocalPort = param.AsString(value)
		case "nat_ip":
			a.NatIp = param.AsString(value)
		case "nat_port":
			a.NatPort = param.AsString(value)
		case "interface":
			a.Interface = param.AsString(value)
		case "outerface":
			a.Outerface = param.AsString(value)
		case "state":
			a.State = param.AsString(value)
		case "action":
			a.Action = param.AsString(value)
		case "ip_version":
			a.IpVersion = param.AsString(value)
		case "disabled":
			a.Disabled = param.AsString(value)
		case "created":
			a.Created = param.AsUint(value)
		case "updated":
			a.Updated = param.AsUint(value)
		}
	}
}

func (a *NgingFirewallRuleStatic) Set(key interface{}, value ...interface{}) {
	switch k := key.(type) {
	case map[string]interface{}:
		for kk, vv := range k {
			a.Set(kk, vv)
		}
	default:
		var (
			kk string
			vv interface{}
		)
		if k, y := key.(string); y {
			kk = k
		} else {
			kk = fmt.Sprint(key)
		}
		if len(value) > 0 {
			vv = value[0]
		}
		switch kk {
		case "Id":
			a.Id = param.AsUint(vv)
		case "Type":
			a.Type = param.AsString(vv)
		case "Position":
			a.Position = param.AsInt(vv)
		case "Name":
			a.Name = param.AsString(vv)
		case "Direction":
			a.Direction = param.AsString(vv)
		case "Protocol":
			a.Protocol = param.AsString(vv)
		case "RemoteIp":
			a.RemoteIp = param.AsString(vv)
		case "RemotePort":
			a.RemotePort = param.AsString(vv)
		case "LocalIp":
			a.LocalIp = param.AsString(vv)
		case "LocalPort":
			a.LocalPort = param.AsString(vv)
		case "NatIp":
			a.NatIp = param.AsString(vv)
		case "NatPort":
			a.NatPort = param.AsString(vv)
		case "Interface":
			a.Interface = param.AsString(vv)
		case "Outerface":
			a.Outerface = param.AsString(vv)
		case "State":
			a.State = param.AsString(vv)
		case "Action":
			a.Action = param.AsString(vv)
		case "IpVersion":
			a.IpVersion = param.AsString(vv)
		case "Disabled":
			a.Disabled = param.AsString(vv)
		case "Created":
			a.Created = param.AsUint(vv)
		case "Updated":
			a.Updated = param.AsUint(vv)
		}
	}
}

func (a *NgingFirewallRuleStatic) AsRow(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		r["id"] = a.Id
		r["type"] = a.Type
		r["position"] = a.Position
		r["name"] = a.Name
		r["direction"] = a.Direction
		r["protocol"] = a.Protocol
		r["remote_ip"] = a.RemoteIp
		r["remote_port"] = a.RemotePort
		r["local_ip"] = a.LocalIp
		r["local_port"] = a.LocalPort
		r["nat_ip"] = a.NatIp
		r["nat_port"] = a.NatPort
		r["interface"] = a.Interface
		r["outerface"] = a.Outerface
		r["state"] = a.State
		r["action"] = a.Action
		r["ip_version"] = a.IpVersion
		r["disabled"] = a.Disabled
		r["created"] = a.Created
		r["updated"] = a.Updated
		return r
	}
	for _, field := range onlyFields {
		switch field {
		case "id":
			r["id"] = a.Id
		case "type":
			r["type"] = a.Type
		case "position":
			r["position"] = a.Position
		case "name":
			r["name"] = a.Name
		case "direction":
			r["direction"] = a.Direction
		case "protocol":
			r["protocol"] = a.Protocol
		case "remote_ip":
			r["remote_ip"] = a.RemoteIp
		case "remote_port":
			r["remote_port"] = a.RemotePort
		case "local_ip":
			r["local_ip"] = a.LocalIp
		case "local_port":
			r["local_port"] = a.LocalPort
		case "nat_ip":
			r["nat_ip"] = a.NatIp
		case "nat_port":
			r["nat_port"] = a.NatPort
		case "interface":
			r["interface"] = a.Interface
		case "outerface":
			r["outerface"] = a.Outerface
		case "state":
			r["state"] = a.State
		case "action":
			r["action"] = a.Action
		case "ip_version":
			r["ip_version"] = a.IpVersion
		case "disabled":
			r["disabled"] = a.Disabled
		case "created":
			r["created"] = a.Created
		case "updated":
			r["updated"] = a.Updated
		}
	}
	return r
}

func (a *NgingFirewallRuleStatic) ListPage(cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, nil, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *NgingFirewallRuleStatic) ListPageAs(recv interface{}, cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, recv, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *NgingFirewallRuleStatic) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = a.AsRow()
	}
	return DBI.Fields.BatchValidate(a.Short_(), kvset)
}

func (a *NgingFirewallRuleStatic) Validate(field string, value interface{}) error {
	return DBI.Fields.Validate(a.Short_(), field, value)
}
