// @generated Do not edit this file, which is automatically generated by the generator.

package dbschema

import (
	"fmt"

	"time"

	"github.com/webx-top/com"
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/db/lib/factory/pagination"
	"github.com/webx-top/echo"
	"github.com/webx-top/echo/param"
)

type Slice_NgingFirewallRuleDynamic []*NgingFirewallRuleDynamic

func (s Slice_NgingFirewallRuleDynamic) Range(fn func(m factory.Model) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_NgingFirewallRuleDynamic) RangeRaw(fn func(m *NgingFirewallRuleDynamic) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_NgingFirewallRuleDynamic) GroupBy(keyField string) map[string][]*NgingFirewallRuleDynamic {
	r := map[string][]*NgingFirewallRuleDynamic{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*NgingFirewallRuleDynamic{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (s Slice_NgingFirewallRuleDynamic) KeyBy(keyField string) map[string]*NgingFirewallRuleDynamic {
	r := map[string]*NgingFirewallRuleDynamic{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (s Slice_NgingFirewallRuleDynamic) AsKV(keyField string, valueField string) param.Store {
	r := param.Store{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (s Slice_NgingFirewallRuleDynamic) Transform(transfers map[string]param.Transfer) []param.Store {
	r := make([]param.Store, len(s))
	for idx, row := range s {
		r[idx] = row.AsMap().Transform(transfers)
	}
	return r
}

func (s Slice_NgingFirewallRuleDynamic) FromList(data interface{}) Slice_NgingFirewallRuleDynamic {
	values, ok := data.([]*NgingFirewallRuleDynamic)
	if !ok {
		for _, value := range data.([]interface{}) {
			row := &NgingFirewallRuleDynamic{}
			row.FromRow(value.(map[string]interface{}))
			s = append(s, row)
		}
		return s
	}
	s = append(s, values...)

	return s
}

func NewNgingFirewallRuleDynamic(ctx echo.Context) *NgingFirewallRuleDynamic {
	m := &NgingFirewallRuleDynamic{}
	m.SetContext(ctx)
	return m
}

// NgingFirewallRuleDynamic 防火墙动态规则
type NgingFirewallRuleDynamic struct {
	base    factory.Base
	objects []*NgingFirewallRuleDynamic

	Id                 uint   `db:"id,omitempty,pk" bson:"id,omitempty" comment:"ID" json:"id" xml:"id"`
	SourceType         string `db:"source_type" bson:"source_type" comment:"资源类型" json:"source_type" xml:"source_type"`
	SourceArgs         string `db:"source_args" bson:"source_args" comment:"资源参数(JSON数组)" json:"source_args" xml:"source_args"`
	Regexp             string `db:"regexp" bson:"regexp" comment:"正则规格(JSON数组)" json:"regexp" xml:"regexp"`
	ActionType         string `db:"action_type" bson:"action_type" comment:"操作类型" json:"action_type" xml:"action_type"`
	ActionArg          string `db:"action_arg" bson:"action_arg" comment:"操作参数" json:"action_arg" xml:"action_arg"`
	AggregateDuration  string `db:"aggregate_duration" bson:"aggregate_duration" comment:"持续时长" json:"aggregate_duration" xml:"aggregate_duration"`
	AggregateRegexp    string `db:"aggregate_regexp" bson:"aggregate_regexp" comment:"正则规格(JSON数组)" json:"aggregate_regexp" xml:"aggregate_regexp"`
	OccurrenceNum      uint   `db:"occurrence_num" bson:"occurrence_num" comment:"在持续一段时间内的出现次数" json:"occurrence_num" xml:"occurrence_num"`
	OccurrenceDuration string `db:"occurrence_duration" bson:"occurrence_duration" comment:"持续时长(如1h)" json:"occurrence_duration" xml:"occurrence_duration"`
	Disabled           string `db:"disabled" bson:"disabled" comment:"是否(Y/N)禁用" json:"disabled" xml:"disabled"`
	Created            uint   `db:"created" bson:"created" comment:"创建时间" json:"created" xml:"created"`
	Updated            uint   `db:"updated" bson:"updated" comment:"更新时间" json:"updated" xml:"updated"`
}

// - base function

func (a *NgingFirewallRuleDynamic) Trans() *factory.Transaction {
	return a.base.Trans()
}

func (a *NgingFirewallRuleDynamic) Use(trans *factory.Transaction) factory.Model {
	a.base.Use(trans)
	return a
}

func (a *NgingFirewallRuleDynamic) SetContext(ctx echo.Context) factory.Model {
	a.base.SetContext(ctx)
	return a
}

func (a *NgingFirewallRuleDynamic) EventON(on ...bool) factory.Model {
	a.base.EventON(on...)
	return a
}

func (a *NgingFirewallRuleDynamic) EventOFF(off ...bool) factory.Model {
	a.base.EventOFF(off...)
	return a
}

func (a *NgingFirewallRuleDynamic) Context() echo.Context {
	return a.base.Context()
}

func (a *NgingFirewallRuleDynamic) SetConnID(connID int) factory.Model {
	a.base.SetConnID(connID)
	return a
}

func (a *NgingFirewallRuleDynamic) SetNamer(namer func(factory.Model) string) factory.Model {
	a.base.SetNamer(namer)
	return a
}

func (a *NgingFirewallRuleDynamic) Namer() func(factory.Model) string {
	return a.base.Namer()
}

func (a *NgingFirewallRuleDynamic) SetParam(param *factory.Param) factory.Model {
	a.base.SetParam(param)
	return a
}

func (a *NgingFirewallRuleDynamic) Param(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	if a.base.Param() == nil {
		return a.NewParam().SetMiddleware(mw).SetArgs(args...)
	}
	return a.base.Param().SetMiddleware(mw).SetArgs(args...)
}

// - current function

func (a *NgingFirewallRuleDynamic) New(structName string, connID ...int) factory.Model {
	if len(connID) > 0 {
		return factory.NewModel(structName, connID[0]).Use(a.base.Trans())
	}
	return factory.NewModel(structName, a.base.ConnID()).Use(a.base.Trans())
}

func (a *NgingFirewallRuleDynamic) Objects() []*NgingFirewallRuleDynamic {
	if a.objects == nil {
		return nil
	}
	return a.objects[:]
}

func (a *NgingFirewallRuleDynamic) XObjects() Slice_NgingFirewallRuleDynamic {
	return Slice_NgingFirewallRuleDynamic(a.Objects())
}

func (a *NgingFirewallRuleDynamic) NewObjects() factory.Ranger {
	return &Slice_NgingFirewallRuleDynamic{}
}

func (a *NgingFirewallRuleDynamic) InitObjects() *[]*NgingFirewallRuleDynamic {
	a.objects = []*NgingFirewallRuleDynamic{}
	return &a.objects
}

func (a *NgingFirewallRuleDynamic) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(a.base.ConnID()).SetTrans(a.base.Trans()).SetCollection(a.Name_()).SetModel(a)
}

func (a *NgingFirewallRuleDynamic) Short_() string {
	return "nging_firewall_rule_dynamic"
}

func (a *NgingFirewallRuleDynamic) Struct_() string {
	return "NgingFirewallRuleDynamic"
}

func (a *NgingFirewallRuleDynamic) Name_() string {
	if a.base.Namer() != nil {
		return WithPrefix(a.base.Namer()(a))
	}
	return WithPrefix(factory.TableNamerGet(a.Short_())(a))
}

func (a *NgingFirewallRuleDynamic) CPAFrom(source factory.Model) factory.Model {
	a.SetContext(source.Context())
	a.Use(source.Trans())
	a.SetNamer(source.Namer())
	return a
}

func (a *NgingFirewallRuleDynamic) Get(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	base := a.base
	if !a.base.Eventable() {
		err = a.Param(mw, args...).SetRecv(a).One()
		a.base = base
		return
	}
	queryParam := a.Param(mw, args...).SetRecv(a)
	if err = DBI.FireReading(a, queryParam); err != nil {
		return
	}
	err = queryParam.One()
	a.base = base
	if err == nil {
		err = DBI.FireReaded(a, queryParam)
	}
	return
}

func (a *NgingFirewallRuleDynamic) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*NgingFirewallRuleDynamic:
			err = DBI.FireReaded(a, queryParam, Slice_NgingFirewallRuleDynamic(*v))
		case []*NgingFirewallRuleDynamic:
			err = DBI.FireReaded(a, queryParam, Slice_NgingFirewallRuleDynamic(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *NgingFirewallRuleDynamic) GroupBy(keyField string, inputRows ...[]*NgingFirewallRuleDynamic) map[string][]*NgingFirewallRuleDynamic {
	var rows Slice_NgingFirewallRuleDynamic
	if len(inputRows) > 0 {
		rows = Slice_NgingFirewallRuleDynamic(inputRows[0])
	} else {
		rows = Slice_NgingFirewallRuleDynamic(a.Objects())
	}
	return rows.GroupBy(keyField)
}

func (a *NgingFirewallRuleDynamic) KeyBy(keyField string, inputRows ...[]*NgingFirewallRuleDynamic) map[string]*NgingFirewallRuleDynamic {
	var rows Slice_NgingFirewallRuleDynamic
	if len(inputRows) > 0 {
		rows = Slice_NgingFirewallRuleDynamic(inputRows[0])
	} else {
		rows = Slice_NgingFirewallRuleDynamic(a.Objects())
	}
	return rows.KeyBy(keyField)
}

func (a *NgingFirewallRuleDynamic) AsKV(keyField string, valueField string, inputRows ...[]*NgingFirewallRuleDynamic) param.Store {
	var rows Slice_NgingFirewallRuleDynamic
	if len(inputRows) > 0 {
		rows = Slice_NgingFirewallRuleDynamic(inputRows[0])
	} else {
		rows = Slice_NgingFirewallRuleDynamic(a.Objects())
	}
	return rows.AsKV(keyField, valueField)
}

func (a *NgingFirewallRuleDynamic) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*NgingFirewallRuleDynamic:
			err = DBI.FireReaded(a, queryParam, Slice_NgingFirewallRuleDynamic(*v))
		case []*NgingFirewallRuleDynamic:
			err = DBI.FireReaded(a, queryParam, Slice_NgingFirewallRuleDynamic(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *NgingFirewallRuleDynamic) Insert() (pk interface{}, err error) {
	a.Created = uint(time.Now().Unix())
	a.Id = 0
	if len(a.SourceType) == 0 {
		a.SourceType = "file"
	}
	if len(a.ActionType) == 0 {
		a.ActionType = "ban"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if a.base.Eventable() {
		err = DBI.Fire("creating", a, nil)
		if err != nil {
			return
		}
	}
	pk, err = a.Param(nil).SetSend(a).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint(v)
		}
	}
	if err == nil && a.base.Eventable() {
		err = DBI.Fire("created", a, nil)
	}
	return
}

func (a *NgingFirewallRuleDynamic) Update(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.SourceType) == 0 {
		a.SourceType = "file"
	}
	if len(a.ActionType) == 0 {
		a.ActionType = "ban"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Update()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(a).Update(); err != nil {
		return
	}
	return DBI.Fire("updated", a, mw, args...)
}

func (a *NgingFirewallRuleDynamic) Updatex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.SourceType) == 0 {
		a.SourceType = "file"
	}
	if len(a.ActionType) == 0 {
		a.ActionType = "ban"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Updatex()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).SetSend(a).Updatex(); err != nil {
		return
	}
	err = DBI.Fire("updated", a, mw, args...)
	return
}

func (a *NgingFirewallRuleDynamic) UpdateByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.SourceType) == 0 {
		a.SourceType = "file"
	}
	if len(a.ActionType) == 0 {
		a.ActionType = "ban"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdateByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).UpdateByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *NgingFirewallRuleDynamic) UpdatexByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (affected int64, err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.SourceType) == 0 {
		a.SourceType = "file"
	}
	if len(a.ActionType) == 0 {
		a.ActionType = "ban"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdatexByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).UpdatexByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *NgingFirewallRuleDynamic) UpdateField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (err error) {
	return a.UpdateFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *NgingFirewallRuleDynamic) UpdateFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (err error) {

	if val, ok := kvset["source_type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["source_type"] = "file"
		}
	}
	if val, ok := kvset["action_type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["action_type"] = "ban"
		}
	}
	if val, ok := kvset["disabled"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["disabled"] = "N"
		}
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Update()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(kvset).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, editColumns, mw, args...)
}

func (a *NgingFirewallRuleDynamic) UpdateValues(mw func(db.Result) db.Result, keysValues *db.KeysValues, args ...interface{}) (err error) {
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(keysValues).Update()
	}
	m := *a
	m.FromRow(keysValues.Map())
	if err = DBI.FireUpdate("updating", &m, keysValues.Keys(), mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(keysValues).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, keysValues.Keys(), mw, args...)
}

func (a *NgingFirewallRuleDynamic) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = a.Param(mw, args...).SetSend(a).Upsert(func() error {
		a.Updated = uint(time.Now().Unix())
		if len(a.SourceType) == 0 {
			a.SourceType = "file"
		}
		if len(a.ActionType) == 0 {
			a.ActionType = "ban"
		}
		if len(a.Disabled) == 0 {
			a.Disabled = "N"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("updating", a, mw, args...)
	}, func() error {
		a.Created = uint(time.Now().Unix())
		a.Id = 0
		if len(a.SourceType) == 0 {
			a.SourceType = "file"
		}
		if len(a.ActionType) == 0 {
			a.ActionType = "ban"
		}
		if len(a.Disabled) == 0 {
			a.Disabled = "N"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("creating", a, nil)
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint(v)
		}
	}
	if err == nil && a.base.Eventable() {
		if pk == nil {
			err = DBI.Fire("updated", a, mw, args...)
		} else {
			err = DBI.Fire("created", a, nil)
		}
	}
	return
}

func (a *NgingFirewallRuleDynamic) Delete(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Delete()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).Delete(); err != nil {
		return
	}
	return DBI.Fire("deleted", a, mw, args...)
}

func (a *NgingFirewallRuleDynamic) Deletex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Deletex()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).Deletex(); err != nil {
		return
	}
	err = DBI.Fire("deleted", a, mw, args...)
	return
}

func (a *NgingFirewallRuleDynamic) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return a.Param(mw, args...).Count()
}

func (a *NgingFirewallRuleDynamic) Exists(mw func(db.Result) db.Result, args ...interface{}) (bool, error) {
	return a.Param(mw, args...).Exists()
}

func (a *NgingFirewallRuleDynamic) Reset() *NgingFirewallRuleDynamic {
	a.Id = 0
	a.SourceType = ``
	a.SourceArgs = ``
	a.Regexp = ``
	a.ActionType = ``
	a.ActionArg = ``
	a.AggregateDuration = ``
	a.AggregateRegexp = ``
	a.OccurrenceNum = 0
	a.OccurrenceDuration = ``
	a.Disabled = ``
	a.Created = 0
	a.Updated = 0
	return a
}

func (a *NgingFirewallRuleDynamic) AsMap(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		r["Id"] = a.Id
		r["SourceType"] = a.SourceType
		r["SourceArgs"] = a.SourceArgs
		r["Regexp"] = a.Regexp
		r["ActionType"] = a.ActionType
		r["ActionArg"] = a.ActionArg
		r["AggregateDuration"] = a.AggregateDuration
		r["AggregateRegexp"] = a.AggregateRegexp
		r["OccurrenceNum"] = a.OccurrenceNum
		r["OccurrenceDuration"] = a.OccurrenceDuration
		r["Disabled"] = a.Disabled
		r["Created"] = a.Created
		r["Updated"] = a.Updated
		return r
	}
	for _, field := range onlyFields {
		switch field {
		case "Id":
			r["Id"] = a.Id
		case "SourceType":
			r["SourceType"] = a.SourceType
		case "SourceArgs":
			r["SourceArgs"] = a.SourceArgs
		case "Regexp":
			r["Regexp"] = a.Regexp
		case "ActionType":
			r["ActionType"] = a.ActionType
		case "ActionArg":
			r["ActionArg"] = a.ActionArg
		case "AggregateDuration":
			r["AggregateDuration"] = a.AggregateDuration
		case "AggregateRegexp":
			r["AggregateRegexp"] = a.AggregateRegexp
		case "OccurrenceNum":
			r["OccurrenceNum"] = a.OccurrenceNum
		case "OccurrenceDuration":
			r["OccurrenceDuration"] = a.OccurrenceDuration
		case "Disabled":
			r["Disabled"] = a.Disabled
		case "Created":
			r["Created"] = a.Created
		case "Updated":
			r["Updated"] = a.Updated
		}
	}
	return r
}

func (a *NgingFirewallRuleDynamic) FromRow(row map[string]interface{}) {
	for key, value := range row {
		switch key {
		case "id":
			a.Id = param.AsUint(value)
		case "source_type":
			a.SourceType = param.AsString(value)
		case "source_args":
			a.SourceArgs = param.AsString(value)
		case "regexp":
			a.Regexp = param.AsString(value)
		case "action_type":
			a.ActionType = param.AsString(value)
		case "action_arg":
			a.ActionArg = param.AsString(value)
		case "aggregate_duration":
			a.AggregateDuration = param.AsString(value)
		case "aggregate_regexp":
			a.AggregateRegexp = param.AsString(value)
		case "occurrence_num":
			a.OccurrenceNum = param.AsUint(value)
		case "occurrence_duration":
			a.OccurrenceDuration = param.AsString(value)
		case "disabled":
			a.Disabled = param.AsString(value)
		case "created":
			a.Created = param.AsUint(value)
		case "updated":
			a.Updated = param.AsUint(value)
		}
	}
}

func (a *NgingFirewallRuleDynamic) Set(key interface{}, value ...interface{}) {
	switch k := key.(type) {
	case map[string]interface{}:
		for kk, vv := range k {
			a.Set(kk, vv)
		}
	default:
		var (
			kk string
			vv interface{}
		)
		if k, y := key.(string); y {
			kk = k
		} else {
			kk = fmt.Sprint(key)
		}
		if len(value) > 0 {
			vv = value[0]
		}
		switch kk {
		case "Id":
			a.Id = param.AsUint(vv)
		case "SourceType":
			a.SourceType = param.AsString(vv)
		case "SourceArgs":
			a.SourceArgs = param.AsString(vv)
		case "Regexp":
			a.Regexp = param.AsString(vv)
		case "ActionType":
			a.ActionType = param.AsString(vv)
		case "ActionArg":
			a.ActionArg = param.AsString(vv)
		case "AggregateDuration":
			a.AggregateDuration = param.AsString(vv)
		case "AggregateRegexp":
			a.AggregateRegexp = param.AsString(vv)
		case "OccurrenceNum":
			a.OccurrenceNum = param.AsUint(vv)
		case "OccurrenceDuration":
			a.OccurrenceDuration = param.AsString(vv)
		case "Disabled":
			a.Disabled = param.AsString(vv)
		case "Created":
			a.Created = param.AsUint(vv)
		case "Updated":
			a.Updated = param.AsUint(vv)
		}
	}
}

func (a *NgingFirewallRuleDynamic) AsRow(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		r["id"] = a.Id
		r["source_type"] = a.SourceType
		r["source_args"] = a.SourceArgs
		r["regexp"] = a.Regexp
		r["action_type"] = a.ActionType
		r["action_arg"] = a.ActionArg
		r["aggregate_duration"] = a.AggregateDuration
		r["aggregate_regexp"] = a.AggregateRegexp
		r["occurrence_num"] = a.OccurrenceNum
		r["occurrence_duration"] = a.OccurrenceDuration
		r["disabled"] = a.Disabled
		r["created"] = a.Created
		r["updated"] = a.Updated
		return r
	}
	for _, field := range onlyFields {
		switch field {
		case "id":
			r["id"] = a.Id
		case "source_type":
			r["source_type"] = a.SourceType
		case "source_args":
			r["source_args"] = a.SourceArgs
		case "regexp":
			r["regexp"] = a.Regexp
		case "action_type":
			r["action_type"] = a.ActionType
		case "action_arg":
			r["action_arg"] = a.ActionArg
		case "aggregate_duration":
			r["aggregate_duration"] = a.AggregateDuration
		case "aggregate_regexp":
			r["aggregate_regexp"] = a.AggregateRegexp
		case "occurrence_num":
			r["occurrence_num"] = a.OccurrenceNum
		case "occurrence_duration":
			r["occurrence_duration"] = a.OccurrenceDuration
		case "disabled":
			r["disabled"] = a.Disabled
		case "created":
			r["created"] = a.Created
		case "updated":
			r["updated"] = a.Updated
		}
	}
	return r
}

func (a *NgingFirewallRuleDynamic) ListPage(cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, nil, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *NgingFirewallRuleDynamic) ListPageAs(recv interface{}, cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, recv, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *NgingFirewallRuleDynamic) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = a.AsRow()
	}
	return DBI.Fields.BatchValidate(a.Short_(), kvset)
}

func (a *NgingFirewallRuleDynamic) Validate(field string, value interface{}) error {
	return DBI.Fields.Validate(a.Short_(), field, value)
}
